=================sort() function: ==========================
compareFn(a, b) 	sort order
return value
> 0	                sort a after b, e.g. [b, a]
< 0	                sort a before b, e.g. [a, b]
=== 0	            keep original order of a and b

It overwrites the original Array.
let numArr = [10, 5, 80];
numArr.sort((a, b) => a - b);
console.log(numArr); // Output: [5, 10, 80]

let numArr = [10, 5, 80];

numArr.sort((a, b) => b - a);
console.log(numArr); // Output: [80, 10, 5]

let stringsArr = ["a", "A", "b"];

stringsArr.sort((a, b) => a.toLowerCase() < b.toLowerCase() ? 1 : -1);
console.log(stringsArr); // Output: ["b", "A", "a"]

let stringsArr = ["a", "A", "b"];

stringsArr.sort((a, b) => {
    return a.toLowerCase() < b.toLowerCase() ? -1 : 1
})

console.log("stringsArr:", stringsArr); // output:  [ 'a', 'A', 'b' ]

stringsArr.sort((a, b) => {
    return a.toLowerCase() < b.toLowerCase() ? 1 : -1
})

output//  [ 'b', 'A', 'a' ]
Note: Negative return means increasing order and vice-versa. a-b will be negative in increasing order

let courses = [{ id: 1, name: "QJava" }, { id: 2, name: "nava" }]

courses.sort((a, b) => {
    if (a.name.toLowerCase() < b.name.toLowerCase()) return -1
    if (a.name.toLowerCase() > b.name.toLowerCase()) return 1
})
console.log("courses:", courses);

// How to Avoid Modifying the Original Array When Sorting

let originalArray = [2, 1, 3];
let sortedArray = originalArray.slice().sort((a, b) => a - b);

console.log(originalArray); // Output: [2, 1, 3]
console.log(sortedArray); // Output: [1, 2, 3]
Note: use slice() method if you do not want to modify original Array
==============Adding elements==============================
let originalArray = [2, 1, 3];
originalArray.push([5, 6])  //add at the end
originalArray.push(5, 6)

console.log("originalArray:", originalArray);

// insert at the begining
let originalArray = [2, 1, 3];
originalArray.unshift([5, 6])
originalArray.unshift(5, 6)

// check slice and splice method


=========================finding element===========

const arr = [1, 2, 3, 4, 1]
console.log(arr.indexOf(1));  
console.log(arr.indexOf('a'));  // return - 1 if it does not find 
Note: check the second parmeter of indexOf method
console.log(arr.lastIndexOf(1));
console.log(arr.lastIndexOf(6));

console.log(arr.includes(6)); // return true if it finds

// predicate or callback means function passed as parmeter

let courses = [{ id: 1, name: "QJava" }, { id: 2, name: "nava" }]
//find function will return object
let cc = courses.find((course) => {
    return course.name === 'nava'
})

console.log("cc:", cc);
let courses = [{ id: 1, name: "QJava" }, { id: 2, name: "nava" }]
//findIndex function will return index of object

let cc = courses.findIndex((course) => {
    return course.name === 'nava'
})

console.log("cc:", cc);


================Removing element==========================
const nums = [1,2,3,4]
// end
const last = nums.pop()

// remove from begining
// const first = nums.shift()

// remove from begining
nums.splice(2, 1)

=======================empty an Array====================
let num = [1,2,3,4]

1) num = []
2 num.length = 0
3) num.splice(0,num.length)

=============concat operation===
const first =  [1,2,3]
const second =  [4,5,6]
const combined = first.concat(second)

 ==============join Array=================================
 // join method return a string
 const first = [1, 2, 3]
let res = first.join('-')  
console.log("res:", res); // 1-2-3

const msg = 'This is my first message';
const res = msg.split(' ')

// console.log("res:", res);
const resJioin = res.join(' ')
console.log("resJoin", resJioin); // This is my first message

============some and every=====
const first = [1, 2, 3]
const allPositive = first.every(val => {
    return val > 0
})

const atLeastOnePositive = first.some(val => {
    return val > 0
})

// In JS we do not have controll over garbage collection. It automatically runs in background.







Note: Creating duplicates of an Array and object.
const nums = { a: 6, b: 9 }
let cc = { ...nums } // copy of nums object 
console.log("", cc);

// const nums = [6, 9]
// let cc = [...nums]

// console.log("", cc);

const nums = [6, 9]
let cc = { ...nums }


=============================================
1) push: add element at the end of Array.
2) pop: remove last element of array
3) shift: Removes first element from array.
    arr.shift()
4) unshift: add element at the begining
    arr.unShift()
5) splice: 
    const arr = [1, 2, 3, 4]
    arr.splice(2, 1, 'a', 'b')
    splice(startIndex,numberOfElementsRemoved,listOfElementsAdded)
    console.log(arr)
    [ 1, 2, 'a', 'b', 4 ]

6) indexOf: return the index of searched element else return -1
7) lastIndexOf: return the element of last element
8)includes: search an element in the array.
    arr.includes(5)
Note: above 3 functions has optional second parameter from where search will begin.

9) find : return the complete object inside the array.
10)findIndex: return the index of matched objecte else return -1
11) concat: 
    const combinedArray = first.concat(second)
    if array contains reference types(objects) their reference will be copied
12)slice: It returns the deleted elements in Array from.
    const duplicate = firstArray.slice()

13) spread operator
    It is used to combine array
    const combinedArray = [...first, ...second]
14) Iterating array:
    1) for of loop: 
    2) forEachLoop: takes a callback function to iterate each element and can print index of element
    3)for in loop: iterate over index of array & objects.It iterate over prototype properties of objects

15) join(): join the elements  of array and return a string
        arr.join('-');
16) sort():
    let sortedArray = arr.sort((a, b) => a - b > 0 ? -1 : 1)

17) reverse():
18) every():  testing elements of array
    let arr = [1, 2, 3, 4, -5]
    const allPositive = arr.every(value => value > 0)
    console.log(allPositive) // false
19) some: 
    let arr = [1, 2, 3, 4, -5]
    const allLeastOnePositive = arr.some(value => value > 0)
    console.log(allLeastOnePositive)

20) map:
    let arr = [1, 2, 3, 4, -5]
    items = arr.map(n => ({ value: n }))
    console.log(items)

// Map & Filter method do not modify original array. It return a new array.


let arr = [1, 2, 3, 4, 5]

function move(arr, index, offset) {
    let output = [...arr];
    let position = index + offset

    if (position >= arr.length || position < 0) {
        console.log('invalid index')
    }
    else {
        let deleted = output.splice(index, 1)[0]
        output.splice(position, 0, deleted)
        console.log(output);
    }
}

move(arr, 1, -5)

// Find max element using reduce method. default value of accumulator is first element of array    
let maxElement = arr.reduce((a, b) => a > b ? a : b)


// hasOwnProperty: It checks the given property is instance or prototype